# Beta CI/CD Workflow for Python Projects
# Simplified version focused on essential checks for junior developers

name: Beta Python CI/CD

# When to run this workflow
on:
  push:
    branches: [ main, develop ]
    paths:
      - '**.py'
      - 'requirements*.txt'
  pull_request:
    branches: [ main, develop ]
    paths:
      - '**.py'
      - 'requirements*.txt'
  workflow_dispatch:  # Allow manual runs

# Environment settings
env:
  PYTHON_VERSION: '3.11'

# Cancel previous runs on the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Job 1: Basic Code Quality (Essential)
  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Get the code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install tools
        run: |
          python -m pip install --upgrade pip
          pip install black isort flake8
          # Install project dependencies if they exist
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
      
      - name: Check code formatting (Black)
        run: |
          echo "🎨 Checking if code is properly formatted..."
          black --check --diff .
        continue-on-error: false
      
      - name: Check import sorting (isort)
        run: |
          echo "📦 Checking if imports are properly sorted..."
          isort --check-only --diff .
        continue-on-error: false
      
      - name: Basic linting (Flake8)
        run: |
          echo "🔍 Checking for basic code issues..."
          # Only check for serious errors that will break the code
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Show other issues but don't fail the build
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

  # Job 2: Test the Code (Essential)
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Get the code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov
          # Install project dependencies
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
      
      - name: Run tests with coverage
        run: |
          echo "🧪 Running tests..."
          if [ -d "tests" ]; then
            # Run tests with coverage if tests directory exists
            pytest --cov=. --cov-report=term-missing --cov-fail-under=60 -v
          else
            echo "ℹ️ No tests directory found. Creating a basic test check..."
            python -c "
            import sys
            import importlib.util
            import os

            # Simple smoke test: try to import all Python files
            errors = []
            for root, dirs, files in os.walk('.'):
                # Skip hidden directories and common non-source directories
                dirs[:] = [d for d in dirs if not d.startswith('.') and d not in ['__pycache__', 'node_modules']]
                
                for file in files:
                    if file.endswith('.py') and not file.startswith('test_'):
                        file_path = os.path.join(root, file)
                        module_name = file_path.replace('/', '.').replace('\\\\', '.').replace('.py', '')
                        module_name = module_name.lstrip('.')
                        
                        try:
                            spec = importlib.util.spec_from_file_location(module_name, file_path)
                            if spec and spec.loader:
                                module = importlib.util.module_from_spec(spec)
                                spec.loader.exec_module(module)
                                print(f'✅ {file_path} imports successfully')
                        except Exception as e:
                            errors.append(f'❌ {file_path}: {str(e)}')
                            
            if errors:
                print('\\nImport errors found:')
                for error in errors:
                    print(error)
                sys.exit(1)
            else:
                print('\\n🎉 All Python files import successfully!')
            "
          fi

  # Job 3: Security Check (Important but not blocking for beginners)
  security:
    name: Security Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Get the code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      
      - name: Check for security issues
        run: |
          echo "🔒 Checking for security issues..."
          # Run bandit but don't fail the build for beginners
          bandit -r . -f json -o bandit-report.json || true
          
          # Show security issues but continue
          echo "Security scan results:"
          bandit -r . || echo "⚠️ Security issues found. Please review them."
          
          # Check for known vulnerabilities in dependencies
          safety check || echo "⚠️ Some dependencies have known vulnerabilities."
        continue-on-error: true
      
      - name: Upload security report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-report
          path: bandit-report.json
          retention-days: 30

  # Job 4: Simple Build Check (Make sure everything works together)
  build:
    name: Build Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [code-quality, test]
    
    steps:
      - name: Get the code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install and test build
        run: |
          python -m pip install --upgrade pip
          
          # Install dependencies
          if [ -f requirements.txt ]; then
            echo "📦 Installing requirements.txt..."
            pip install -r requirements.txt
          fi
          
          if [ -f requirements-dev.txt ]; then
            echo "📦 Installing requirements-dev.txt..."
            pip install -r requirements-dev.txt
          fi
          
          # Try to build/install the package if setup.py or pyproject.toml exists
          if [ -f setup.py ]; then
            echo "🔨 Building package with setup.py..."
            pip install -e .
          elif [ -f pyproject.toml ]; then
            echo "🔨 Building package with pyproject.toml..."
            pip install build
            python -m build
          else
            echo "ℹ️ No setup.py or pyproject.toml found. Skipping package build."
          fi
          
          echo "✅ Build completed successfully!"

  # Job 5: AI Code Review (Optional, runs in parallel)
  ai-review:
    name: AI Code Review
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Get the code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Get full history for better analysis
      
      - name: AI Code Analysis
        run: |
          echo "🤖 Running AI-powered code analysis..."
          
          # Get changed files
          git diff --name-only origin/${{ github.base_ref }}...HEAD > changed_files.txt
          
          echo "Files changed in this PR:"
          cat changed_files.txt
          
          # Simple AI review simulation (in real implementation, this would call an AI service)
          echo "
          🤖 AI Code Review Summary:
          
          ✅ Code structure looks good
          ✅ No obvious security issues detected
          ✅ Following Python best practices
          
          💡 Suggestions:
          - Consider adding more unit tests
          - Add docstrings to new functions
          - Ensure error handling is robust
          
          Overall: Code quality is acceptable for merge ✨
          "

  # Job 6: Summary and Notifications
  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [code-quality, test, security, build]
    if: always()
    
    steps:
      - name: Check results and create summary
        run: |
          echo "📊 CI/CD Pipeline Summary"
          echo "========================="
          
          # Check job results
          CODE_QUALITY="${{ needs.code-quality.result }}"
          TEST="${{ needs.test.result }}"
          SECURITY="${{ needs.security.result }}"
          BUILD="${{ needs.build.result }}"
          
          echo "🎨 Code Quality: $CODE_QUALITY"
          echo "🧪 Tests: $TEST"
          echo "🔒 Security: $SECURITY"
          echo "🔨 Build: $BUILD"
          echo ""
          
          # Determine overall status
          if [[ "$CODE_QUALITY" == "success" && "$TEST" == "success" && "$BUILD" == "success" ]]; then
            echo "✅ Overall Status: PASSED"
            echo ""
            echo "🎉 Great job! Your code passed all essential checks."
            echo "💡 Next steps:"
            echo "   - Request a code review from a team member"
            echo "   - Address any security warnings (non-blocking)"
            echo "   - Consider adding more tests for better coverage"
            
            # Create a simple success summary for GitHub
            cat >> $GITHUB_STEP_SUMMARY << 'EOF'
          ## ✅ CI/CD Pipeline Passed!
          
          Your code successfully passed all essential quality checks:
          
          | Check | Status |
          |-------|--------|
          | 🎨 Code Formatting | ✅ Passed |
          | 🧪 Tests | ✅ Passed |
          | 🔨 Build | ✅ Passed |
          | 🔒 Security | ⚠️ Check warnings |
          
          ### 🎉 Ready for Review!
          Your code is ready for human review. Great work!
          
          ### 💡 Tips for Next Time
          - Keep writing tests as you add features
          - Use `black .` and `isort .` before committing
          - Ask AI assistants to review your code before submitting
          EOF
          
          else
            echo "❌ Overall Status: FAILED"
            echo ""
            echo "😟 Some checks didn't pass. Here's how to fix them:"
            
            if [[ "$CODE_QUALITY" != "success" ]]; then
              echo "🎨 Code Quality Issues:"
              echo "   - Run 'black .' to fix formatting"
              echo "   - Run 'isort .' to fix import sorting"
              echo "   - Check flake8 output for code issues"
            fi
            
            if [[ "$TEST" != "success" ]]; then
              echo "🧪 Test Issues:"
              echo "   - Run 'pytest' locally to see failing tests"
              echo "   - Fix any import errors in your Python files"
              echo "   - Ask for help if you're stuck!"
            fi
            
            if [[ "$BUILD" != "success" ]]; then
              echo "🔨 Build Issues:"
              echo "   - Check that all dependencies are listed in requirements.txt"
              echo "   - Make sure your code can be imported without errors"
            fi
            
            echo ""
            echo "💡 Don't worry! These are common issues that are easy to fix."
            echo "🤝 Ask a team member or AI assistant for help if needed."
            
            # Create a helpful failure summary for GitHub
            cat >> $GITHUB_STEP_SUMMARY << 'EOF'
          ## ❌ CI/CD Pipeline Issues Found
          
          Don't worry! These are common issues that are easy to fix:
          
          | Check | Status | Fix |
          |-------|--------|-----|
          | 🎨 Code Formatting | ❌ Failed | Run `black .` and `isort .` |
          | 🧪 Tests | ❌ Failed | Run `pytest` locally, fix import errors |
          | 🔨 Build | ❌ Failed | Check dependencies and imports |
          | 🔒 Security | ⚠️ Warnings | Review security warnings |
          
          ### 🛠️ Quick Fix Commands
          ```bash
          # Format your code
          black .
          isort .
          
          # Test your code
          pytest
          
          # Check for issues
          flake8 .
          ```
          
          ### 🤝 Need Help?
          - Ask in team chat
          - Use your AI assistant
          - Check the detailed logs above
          EOF
          
          fi

# Additional environment variables for customization
env:
  # Beginner-friendly settings
  PYTHONPATH: "."
  PYTHONDONTWRITEBYTECODE: "1"
  
  # CI settings
  CI: "true"
  ENVIRONMENT: "test"
  
  # Coverage settings (relaxed for beginners)
  COVERAGE_THRESHOLD: "60"  # Lower threshold for new developers
  
  # Security settings (warnings only)
  SECURITY_LEVEL: "warning"  # Don't fail builds on security warnings